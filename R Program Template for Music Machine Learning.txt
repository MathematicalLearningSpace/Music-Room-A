#-------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------R Program for Music Machine Learning and Generation----------------------------------
Title: R Program Template for Music Machine Learning
#--------------------------Deep Learning---------------------
library(deepnet);library(darch);library(FCNN4R);library(ForecastCombinations);library(EbayesThresh);library(HMM);library(markovchain)
#------------------------Data Processing--------------------
library(XML);library(xml2);library(XML2R);library(seqinr);library(methods);library(dplyr);library(Matrix);library(pracma);library(expm)
#-----------------------Signal Processing-------------------
library(audio);library(tuneR);library(dtw);library(wavelets);library(dtwclust);library(TSclust);library(TSdist)
#----------------------Parallel Processing------------------
library(parallel);library(microbenchmark)
#-------------------------------------------------------------------------------------------------------------------------------
#---------------------Read Collection of Music Compositions for Album container---------------------------------
#---------------------Each Upper or Lower Case Letter Represent a Music composition----------------------------

#---------------------Data Files in Music XML------------------------------------------------------------------

album<-c("A","B","C","D","E","F","G","H","I","J)
album.df<-data.frame()

music.track.1<-read_xml(album[1])
music.track.2<-read_xml(album[2])
music.track.3<-read_xml(album[3])
music.track.4<-read_xml(album[4])
music.track.5<-read_xml(album[5])
music.track.6<-read_xml(album[6])
music.track.7<-read_xml(album[7])
music.track.8<-read_xml(album[8])
music.track.9<-read_xml(album[9])
music.track.10<-read_xml(album[10])

#----------------Function Library to Be Designed and Tested in the Classroom------------------
Module.Music.1<-function(X)
{
#-------------------------Internal Functions ---------------------
tag.remove <- function(tagString) {return(gsub("<.*?>", "", tagString))}
#--------------Musical Objects-------------------------------------
music.categories<-c("chord","pitch","step","alter","octave","duration","voice","type","stem","staff")
Notes.By.Measure<-list();Notes.Duration<-list();Notes.By.Step<-list();Notes.By.Octave<-list();Notes.By.Pitch<-list()
Model.1<-list();Model.Chain.1<-list();notes.series<-list()
#-----------------Search Optimization and Filtering-----------------
measures<-xml_find_all(X, ".//measure");Nbr.Measures<-length(measures)
for(i in 1:length(measures))
  {
  Notes.By.Measure[[i]]<- xml_find_all(measures[i], ".//note")
  Notes.Duration[[i]]<- as.numeric(tag.remove(xml_find_all(Notes.By.Measure[[i]], ".//duration")))
  Notes.By.Step[[i]]<-tag.remove(xml_find_all(Notes.By.Measure[[i]], ".//step"))
  Notes.By.Octave[[i]]<-tag.remove(xml_find_all(Notes.By.Measure[[i]], ".//octave"))
  Notes.By.Pitch[[i]]<-tag.remove(xml_find_all(Notes.By.Measure[[i]], ".//pitch"))
  notes<-unlist(Notes.By.Step)
  octaves<-unlist(Notes.By.Octave)
  Model.1[[i]]<-markovchainFit(data = notes)
  Model.Chain.1[[i]]<-as(Model.1[[i]]$estimate,"markovchain") 
}
  Seq<-NULL
  for(i in 1:nrow(X))
  {
    #-------------------Filtering-------------------------- 
    #-------------------Framing----------------------------
    #-------------------Windowing--------------------------
    #------------------Fourier Transformations------------
    #------------------Spectrum----------------------------
    
  }
Model.1.Overall<-markovchainFit(data = notes)
Model.Chain.1.Overall<-as(Model.1.Overall$estimate,"markovchain") 
measures.notes<-xml_find_all(music.track.1, ".//measure//note")
Nbr.Notes<-length(measures.notes)
#-----------------------Tables--------------------------------
Table.1<-table(notes)
  #-----------------------Presentation and Organization--------------
output<-list()
output$Table.1<-xtable::xtable(as.data.frame(Table.1))
output$Transition.Matrix.Table.1<-xtable::xtable(as.data.frame(Model.Chain.1.Overall))
output$Table.1<-Table.1.df
output$Nbr.Measures<-Nbr.Measures
output$Nbr.Notes<-Nbr.Notes
output$Notes.By.Measure<-Notes.By.Measure
output$Notes.Duration<-Notes.Duration
output$Note.Duration.Time.Series<-unlist(Notes.Duration)
output$Notes.By.Step<-Notes.By.Step
output$Notes.By.Octave<-Notes.By.Octave
output$Notes.By.Octave<-Notes.By.Pitch
output$Notes.Time.Series<-as.numeric(unlist(Notes.By.Step))
output$Notes.Octave.Time.Series<-as.numeric(unlist(Notes.By.Octave))
output$Notes.Pitch.Time.Series<-unlist(Notes.By.Pitch)
output$Model.Chain.1<-Model.Chain.1
#output$Piano.Keys.Time.Series<-piano.keys
#output$piano.frequencies<-piano.frequencies
return(output)
}
test.Module.Music.1<-Module.Music.1(music.track.1)
test.Module.Music.1

#-----------------------Deterministic Search Engine and Filtering Models------------------------
tag.remove <- function(tagString) {
  return(gsub("<.*?>", "", tagString))
}
notes.1<-tag.remove(xml_find_all(music.track.1, ".//note//step"))
notes.2<-tag.remove(xml_find_all(music.track.2, ".//note//step"))
notes.3<-tag.remove(xml_find_all(music.track.3, ".//note//step"))
notes.4<-tag.remove(xml_find_all(music.track.4, ".//note//step"))
notes.5<-tag.remove(xml_find_all(music.track.5, ".//note//step"))
notes.6<-tag.remove(xml_find_all(music.track.6, ".//note//step"))
notes.7<-tag.remove(xml_find_all(music.track.7, ".//note//step"))
notes.8<-tag.remove(xml_find_all(music.track.8, ".//note//step"))
notes.9<-tag.remove(xml_find_all(music.track.9, ".//note//step"))
notes.10<-tag.remove(xml_find_all(music.track.10, ".//note//step"))

Album.notes<-cbind(notes.1,notes.2,notes.3,notes.4,notes.5,notes.6,notes.7,notes.8,notes.10)

#--------------------------------Hidden Markov Models------------------

Model.1<-markovchainFit(data = notes.1)
Model.1A <- markovchainFit(data = notes.1, method = "bootstrap", nboot = 5, name = "Bootstrap Mc 1")

#-------------------------------Properties-------------------------------

Model.1$estimate@transitionMatrix
chain.1 <- as(Model.1$estimate,"markovchain") 


#-------------------------------Tables--------------------------------
Table.1<-table(notes.1)
Table.2<-table(notes.2)
Table.3<-table(notes.3)
Table.4<-table(notes.4)
Table.5<-table(notes.5)
Table.6<-table(notes.6)
Table.7<-table(notes.7)
Table.8<-table(notes.8)
Table.9<-table(notes.9)
Table.10<-table(notes.10)

Table.1A<-table(Album.notes)
Table.1A

Table.2A<-summary(Album.notes)
Table.2A

#----------------------------Figures for Classroom-----------------------------------
png(file = stringr::str_join("Figure_","1",".png"))
Figure.1<-dotPlot(notes.1, notes.1, main = "Direct repeat")
dev.off()

png(file = stringr::str_join("Graph_","1",".png"))
plot(chain.1)
dev.off()
